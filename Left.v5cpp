{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\ndigital_out pnu = digital_out(Brain.ThreeWirePort.A);\nmotor Rail = motor(PORT8, ratio18_1, false);\n\nmotor Intake = motor(PORT9, ratio18_1, true);\n\nmotor Motor1R = motor(PORT11, ratio18_1, false);\n\nmotor Motor2R = motor(PORT12, ratio18_1, false);\n\nmotor Motor3R = motor(PORT13, ratio18_1, false);\n\nmotor Motor1L = motor(PORT14, ratio18_1, false);\n\nmotor Motor2L = motor(PORT16, ratio18_1, false);\n\nmotor Motor3L = motor(PORT15, ratio18_1, false);\n\ngps GPS = gps(PORT7, 0.00, 0.00, mm, 180);\ncontroller Controller2 = controller(partner);\ndigital_out pnu2 = digital_out(Brain.ThreeWirePort.B);\nmotor WallStake = motor(PORT10, ratio18_1, false);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:30410V robot test run                                              \n//    Author:Chaeyun Jung\n//    Created: 2024/9/3\n//    Configuration: 0.1        \n//                                                                            \n// ----------------------------------------------------------------------------\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Begin project code\n//function definitions\nvoid _stop(){\n  Motor1R.stop();\n  Motor2R.stop();\n  Motor3R.stop();\n  Motor1L.stop();\n  Motor2L.stop();\n  Motor3L.stop();\n}\nvoid motorVelocity(int vel){\n    Motor1R.setVelocity(vel,percent);\n    Motor2R.setVelocity(vel,percent);\n    Motor3R.setVelocity(vel,percent);\n    Motor1L.setVelocity(vel,percent);\n    Motor2L.setVelocity(vel,percent);\n    Motor3L.setVelocity(vel,percent);\n}\nvoid motorRVelocity(int vel){\n    Motor1R.setVelocity(vel,percent);\n    Motor2R.setVelocity(vel,percent);\n    Motor3R.setVelocity(vel,percent);\n}\nvoid motorLVelocity(int vel){\n    Motor1L.setVelocity(vel,percent);\n    Motor2L.setVelocity(vel,percent);\n    Motor3L.setVelocity(vel,percent);\n}\nvoid preAutonomous(void) {\n  // initialize\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  //Motor velocity initialize\n  Rail.setVelocity(100,percent);\n  Intake.setVelocity(100,percent);\n  GPS.calibrate();\n  _stop();\n  Brain.Screen.print(\"ready\");\n}\n\nvoid moveForward(){\n  Motor1R.spin(forward);\n  Motor2R.spin(forward);\n  Motor3R.spin(forward);\n  Motor1L.spin(reverse);\n  Motor2L.spin(reverse);\n  Motor3L.spin(reverse);\n}\nvoid moveBackward(){\n  Motor1R.spin(reverse);\n  Motor2R.spin(reverse);\n  Motor3R.spin(reverse);\n  Motor1L.spin(forward);\n  Motor2L.spin(forward);\n  Motor3L.spin(forward);\n}\nvoid turnRight(){\n  Motor1R.spin(reverse);\n  Motor2R.spin(reverse);\n  Motor3R.spin(reverse);\n  Motor1L.spin(reverse);\n  Motor2L.spin(reverse);\n  Motor3L.spin(reverse);\n}\nvoid turnLeft(){\n  Motor1R.spin(forward);\n  Motor2R.spin(forward);\n  Motor3R.spin(forward);\n  Motor1L.spin(forward);\n  Motor2L.spin(forward);\n  Motor3L.spin(forward);\n}\n// void shake(){\n//   moveBackward(0.2);\n//   moveForward(0.2);\n//   moveBackward(0.2);\n// }\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n  _stop();\n  wait(2000, msec);\n  pnu.set(false);\n  motorVelocity(30);\n  moveForward();\n  wait(1550, msec);\n  pnu.set(true);\n  _stop();\n  wait(1000, msec);\n  Rail.spin(reverse);\n  Intake.spin(forward);\n  turnRight();\n  wait(550, msec);//need testing\n  _stop();\n  moveBackward();\n  wait(2500, msec);\n  _stop();\n  wait(150, msec);\n  Intake.stop();\n  wait(150, msec);\n  Rail.stop();\n  _stop();\n  moveForward();\n  wait(1500, msec);\n  _stop();\n  pnu2.set(true);\n  wait(200, msec);\n  turnLeft();\n  wait(2000, msec);\n  _stop();\n}\nbool pnuState = true;\nbool canChange = true;\nvoid setPnu(){\n  if(canChange){\n    pnu.set(pnuState);\n    pnuState = !pnuState;\n    canChange = false;\n  }\n}\nvoid resetPnu(){\n  canChange = true;\n}\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  // driver control in this while loop\n  while (true) {\n    wait(20, msec);\n    //Motor control\n    Motor1R.spin(forward,(-Controller1.Axis1.value()-Controller1.Axis3.value()),percent);\n    Motor2R.spin(forward,(-Controller1.Axis1.value()-Controller1.Axis3.value()),percent);\n    Motor3R.spin(forward,(-Controller1.Axis1.value()-Controller1.Axis3.value()),percent);\n    Motor1L.spin(forward,(-Controller1.Axis1.value()+Controller1.Axis3.value()),percent);\n    Motor2L.spin(forward,(-Controller1.Axis1.value()+Controller1.Axis3.value()),percent);\n    Motor3L.spin(forward,(-Controller1.Axis1.value()+Controller1.Axis3.value()),percent);\n\n    Controller1.ButtonL1.pressed([](void){ pnu.set(false); });\n    Controller1.ButtonL1.released([](void){ pnu.set(true); });\n    Controller1.ButtonL2.pressed([](void){ pnu2.set(true); });\n    Controller1.ButtonL2.released([](void){ pnu2.set(false); });\n\n    Controller1.ButtonR2.pressed([](void){ Rail.spin(forward); Intake.spin(reverse); });\n    Controller1.ButtonR2.released([](void){ Rail.stop(); Intake.stop(); });\n    Controller1.ButtonR1.pressed([](void){ Intake.spin(forward); Rail.spin(reverse); });\n    Controller1.ButtonR1.released([](void){ Intake.stop(); Rail.stop(); });\n    Controller1.ButtonUp.pressed([](void){ WallStake.spin(reverse);});\n    Controller1.ButtonUp.released([](void){ WallStake.stop();WallStake.setStopping(hold);});\n    Controller1.ButtonDown.pressed([](void){ WallStake.spin(forward);});\n    Controller1.ButtonDown.released([](void){ WallStake.stop();WallStake.setStopping(hold);});\n  }\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n    double xPos = GPS.xPosition(mm); // X coordinate in mm\n    double yPos = GPS.yPosition(mm); // Y coordinate in mm\n    double heading = GPS.heading();  // Heading in degrees (0-360)\n  }\n}","textLanguage":"cpp","robotConfig":[],"slot":1,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.5","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}